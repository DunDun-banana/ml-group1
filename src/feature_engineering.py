"""
Feature Engineering
- Time-based features (dayofyear, month, weekday, weekend)
- Lag features: Nhi·ªÅu bi·∫øn trong chu·ªói th·ªùi gian ph·ª• thu·ªôc v√†o gi√° tr·ªã tr∆∞·ªõc ƒë√≥ c·ªßa ch√≠nh n√≥ (auto-correlation).
- rolling mean/std for temp
- One-hot encode categorical features (text)
"""

import pandas as pd
import numpy as np
from collections import Counter
from sklearn.base import BaseEstimator, TransformerMixin
from sklearn.preprocessing import LabelEncoder


# √°p d·ª•ng ƒë∆∞·ª£c c·∫£ data
def create_date_features(df):
    # df l√† X th√¥i
    """
    T·∫°o c√°c feature t·ª´ datetime:
      - year, month, day, dayofyear, weekday, is_weekend
      - cyclical encoding cho month v√† dayofyear
      - chuy·ªÉn sunrise/sunset sang float hours
      - day_length = sunset - sunrise
    """
    dt = df.index

    df['year'] = dt.year
    df['month'] = dt.month
    df['day'] = dt.day
    df['dayofyear'] = dt.dayofyear
    df['weekday'] = dt.weekday
    df['is_weekend'] = df['weekday'].isin([5, 6]).astype(int)

    # cyclical encoding
    df['month_sin'] = np.sin(2*np.pi*df['month']/12)
    df['month_cos'] = np.cos(2*np.pi*df['month']/12)
    df['dayofyear_sin'] = np.sin(2*np.pi*df['dayofyear']/365.25)
    df['dayofyear_cos'] = np.cos(2*np.pi*df['dayofyear']/365.25)

    # convert sunrise/sunset sang float hours
    for col in ['sunrise', 'sunset']:
        if col in df.columns:
            dt_col = pd.to_datetime(df[col], errors='coerce')
            df[col] = dt_col.dt.hour + dt_col.dt.minute/60 + dt_col.dt.second/3600

    # day_length = sunset - sunrise
    if 'sunrise' in df.columns and 'sunset' in df.columns:
        df['day_length'] = df['sunset'] - df['sunrise']

    return df


# Ensure time lags are greater than the forecast horizon
def create_lag_rolling(df, columns, lags=(1, 2, 3, 7), windows=(3, 7), forecast_horizon=1, fill_method="bfill"):
    """
    T·∫°o lag v√† rolling features cho nhi·ªÅu c·ªôt c√πng l√∫c, 
    ƒë·∫£m b·∫£o lag kh√¥ng v∆∞·ª£t qu√° forecast_horizon.
    Thay v√¨ drop c√°c gi√° tr·ªã NaN, s·∫Ω fill h·ª£p l√Ω (bfill/ffill/mean).

    Parameters:
    - df: DataFrame
    - columns: list c√°c c·ªôt c·∫ßn t·∫°o lag/rolling
    - lags: tuple c√°c gi√° tr·ªã lag (VD: (1,2,3,7))
    - windows: tuple c√°c gi√° tr·ªã rolling window
    - forecast_horizon: s·ªë ng√†y d·ª± b√°o (lag l·ªõn h∆°n gi√° tr·ªã n√†y s·∫Ω b·ªã b·ªè)
    - fill_method: c√°ch ƒëi·ªÅn gi√° tr·ªã NaN ('bfill', 'ffill', 'mean')

    Returns:
    - df: DataFrame c√≥ th√™m c√°c c·ªôt lag/rolling ƒë√£ ƒë∆∞·ª£c fill
    """
    df = df.sort_index()  # ƒë·∫£m b·∫£o theo th·ªùi gian

    valid_lags = [l for l in lags if l <= forecast_horizon]
    if len(valid_lags) == 0:
        print(f"Kh√¥ng c√≥ lag n√†o ‚â§ forecast_horizon ({forecast_horizon}). Kh√¥ng t·∫°o lag features.")
    else:
        for col in columns:
            for l in valid_lags:
                df[f"{col}_lag_{l}"] = df[col].shift(l)

    for col in columns:
        for w in windows:
            df[f"{col}_roll_mean_{w}"] = df[col].rolling(w, min_periods=1).mean()
            df[f"{col}_roll_std_{w}"] = df[col].rolling(w, min_periods=1).std()

    # üîπ Fill NaN thay v√¨ drop
    if fill_method == "bfill":
        df = df.bfill()
    elif fill_method == "ffill":
        df = df.ffill()
    elif fill_method == "mean":
        df = df.fillna(df.mean(numeric_only=True))
    else:
        raise ValueError("fill_method ph·∫£i l√† 'bfill', 'ffill' ho·∫∑c 'mean'")

    return df



def create_specific_features(df):
    """
    T·∫°o c√°c feature kh√≠ t∆∞·ª£ng ƒë·∫∑c tr∆∞ng, ph√π h·ª£p v·ªõi d·ªØ li·ªáu H√† N·ªôi.
    """
    # C√°c bi·∫øn c∆° b·∫£n t·ª´ d·ªØ li·ªáu c√≥ s·∫µn
    df['temp_range'] = df['tempmax'] - df['tempmin']
    df['dew_spread'] = df['tempmin'] - df['dew']
    df['humidity_high'] = (df['humidity'] > 80).astype(int)
    df['rain_binary'] = (df['precip'] > 0).astype(int)
    df['rain_intensity'] = df['precip'] / (df['precipcover'] + 1e-5)

    # Gi√≥ - √°p su·∫•t - nhi·ªát ƒë·ªô
    df['wind_temp_index'] = df['windspeed'] * df['tempmin']
    df['pressure_temp_index'] = df['sealevelpressure'] * df['tempmin']
    df['humidity_cloud_index'] = (df['humidity'] * df['cloudcover']) / 100
    df['solar_temp_index'] = df['solarradiation'] * df['tempmin']
    df['uv_cloud_index'] = df['moonphase'] * (1 - df['cloudcover'] / 100)  # moonphase g·∫ßn t∆∞∆°ng t·ª± UVindex

    # Gi√≥ m·∫°nh v√† bi·∫øn thi√™n
    df['wind_variability'] = df['windgust'] - df['windspeed']

    # Ph√¢n lo·∫°i h∆∞·ªõng gi√≥
    def categorize_wind_direction(degree):
        if pd.isna(degree):
            return 'Unknown'
        elif 0 <= degree < 45 or 315 <= degree <= 360:
            return 'North'
        elif 45 <= degree < 135:
            return 'East'
        elif 135 <= degree < 225:
            return 'South'
        else:
            return 'West'

    df['wind_category'] = df['winddir'].apply(categorize_wind_direction)

    # Ph√¢n lo·∫°i m√πa (theo kh√≠ h·∫≠u H√† N·ªôi)
    # ƒê√¥ng: 12‚Äì2, Xu√¢n: 3‚Äì5, H√®: 6‚Äì8, Thu: 9‚Äì11
    df['season'] = df['month'].apply(
        lambda x: 'winter' if x in [12, 1, 2]
        else 'spring' if x in [3, 4, 5]
        else 'summer' if x in [6, 7, 8]
        else 'autumn'
    )

    # Foggy: t·∫ßm nh√¨n < 2 km
    df['foggy'] = (df['visibility'] < 2).astype(int)

    # Label encode c√°c bi·∫øn ph√¢n lo·∫°i
    le = LabelEncoder()
    if 'conditions' in df.columns:
        df['conditions_encoded'] = le.fit_transform(df['conditions'].astype(str))

    # One-hot encoding
    df = pd.get_dummies(df, columns=['wind_category', 'season'], drop_first=True)

    return df


def feature_engineering(df, column):
    """
    G·ªôp to√†n b·ªô quy tr√¨nh Feature Engineering.
    column for lag/rolling creating
    """
    df = create_date_features(df)
    df = create_specific_features(df)
    df = create_lag_rolling(df, columns=column)
    return df